name: Deploy NetworkingApp to Azure

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod

permissions:
  id-token: write
  contents: read

jobs:
  # Build and test job
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['8.0.x']
        node-version: ['18.x']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ClientApp/package-lock.json
    
    - name: Restore .NET dependencies
      run: dotnet restore
    
    - name: Build .NET application
      run: dotnet build --no-restore --configuration Release
    
    - name: Run .NET tests
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
    
    - name: Install frontend dependencies
      working-directory: ./ClientApp
      run: npm ci
    
    - name: Lint frontend code
      working-directory: ./ClientApp
      run: npm run lint
    
    - name: Build frontend
      working-directory: ./ClientApp
      run: npm run build
    
    - name: Run frontend tests
      working-directory: ./ClientApp
      run: npm test -- --coverage --watchAll=false
    
    - name: Build Storybook
      working-directory: ./ClientApp
      run: npm run build-storybook
    
    - name: Upload code coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./coverage
        flags: backend
        name: backend-coverage
    
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        directory: ./ClientApp/coverage
        flags: frontend
        name: frontend-coverage

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to development
  deploy-dev:
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    environment: dev
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Setup Azure Developer CLI
      uses: Azure/setup-azd@v1.0.0
    
    - name: Deploy to Azure
      env:
        AZURE_ENV_NAME: dev
        AZURE_LOCATION: australiaeast
      run: |
        azd auth login --client-id "${{ secrets.AZURE_CLIENT_ID }}" --client-secret "${{ secrets.AZURE_CLIENT_SECRET }}" --tenant-id "${{ secrets.AZURE_TENANT_ID }}"
        azd env select dev || azd env new dev
        azd deploy --no-prompt

  # Deploy to test
  deploy-test:
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'test')
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    environment: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Setup Azure Developer CLI
      uses: Azure/setup-azd@v1.0.0
    
    - name: Deploy to Azure
      env:
        AZURE_ENV_NAME: test
        AZURE_LOCATION: australiaeast
      run: |
        azd auth login --client-id "${{ secrets.AZURE_CLIENT_ID }}" --client-secret "${{ secrets.AZURE_CLIENT_SECRET }}" --tenant-id "${{ secrets.AZURE_TENANT_ID }}"
        azd env select test || azd env new test
        azd deploy --no-prompt

  # Deploy to production (manual approval required)
  deploy-prod:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    environment: prod
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Setup Azure Developer CLI
      uses: Azure/setup-azd@v1.0.0
    
    - name: Deploy to Azure
      env:
        AZURE_ENV_NAME: prod
        AZURE_LOCATION: australiaeast
      run: |
        azd auth login --client-id "${{ secrets.AZURE_CLIENT_ID }}" --client-secret "${{ secrets.AZURE_CLIENT_SECRET }}" --tenant-id "${{ secrets.AZURE_TENANT_ID }}"
        azd env select prod || azd env new prod
        azd deploy --no-prompt
    
    - name: Run post-deployment tests
      run: |
        # Add post-deployment smoke tests here
        echo "Running post-deployment verification tests..."
        # curl health checks, API tests, etc.

  # Cleanup on PR close
  cleanup-pr:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    
    steps:
    - name: Cleanup PR environment
      run: |
        echo "Cleaning up PR-specific resources..."
        # Add cleanup logic for PR environments if needed
